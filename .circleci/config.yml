version: 2.1

bundler_version: &bundler_version "2.1.4"
bundler_path: &bundler_path vendor/bundle/2.7
working_directory: &working_directory /Users/distiller/project

orbs:
  prepare-workflow: freeletics/prepare-mobile-workflow@1.14.0

executors:
  macos:
    macos:
      xcode: 12.5.0
    resource_class: medium
    shell: /bin/bash --login -eo pipefail
    working_directory: *working_directory
    environment:
      LC_ALL: "en_US.UTF-8"
      LANG: "en_US.UTF-8"
      HOMEBREW_NO_AUTO_UPDATE: 1
      BUNDLER_VERSION: *bundler_version
      BUNDLE_PATH: *bundler_path

commands:
  populate_app_store_connect_api_auth_key:
    steps:
      - run:
          name: Populate AppStoreConnect API Auth Key
          # Create temporary .p8 file that is then read by fastlane, by this we don't expose the private key info in the iOS repo
          command: |
            echo 'export APPSTORECONNECT_API_PRIVATE_KEY_FILE=/tmp/appstoreconnect_authkey.p8' >> $BASH_ENV
            source $BASH_ENV
            echo $APPSTORECONNECT_API_PRIVATE_KEY > $APPSTORECONNECT_API_PRIVATE_KEY_FILE

  set_ruby_version:
    steps:
      - run:
          name: Set Ruby Version
          command:  echo "ruby-2.7.0" > ~/.ruby-version

  initialize_git_configuration:
    steps:
      - install_gpg
      - add_ssh_keys
      - run:
          name: Set Git config
          command: |
            git config --global user.email "$GIT_AUTHOR_EMAIL"
            git config --global user.name "$GIT_AUTHOR_NAME"
            git config --global user.signingkey "$GIT_SIGNING_KEY"
            git config --global commit.gpgsign true
            export PRIVATE_KEY_FILE=`mktemp`
            echo $GPG_PRIVATE_KEY | base64 -d > $PRIVATE_KEY_FILE
            gpg --import $PRIVATE_KEY_FILE

  install_gpg:
    steps:
      - run:
          name: Installing GPG
          command: brew install gpg

  add_ssh_key:
    steps:
      - run:
          name: "Adding Github ssh key."
          command: |
            mkdir ~/.ssh
            # Copied from checkout step
            echo 'github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==' >> ~/.ssh/known_hosts

  # command
  add_ssh_key_for_fetching_private_swift_packages:
    steps:
      - add_ssh_keys:
          fingerprints:
            - e7:60:41:eb:29:ae:f0:de:cc:02:15:81:de:29:41:c5
      - run:
          name: Add 'github.com' to known hosts for SSH access
          command: for ip in $(dig @8.8.8.8 github.com +short); do ssh-keyscan github.com,$ip; ssh-keyscan $ip; done 2>/dev/null >> ~/.ssh/known_hosts || true

  prepare_standalone_job:
    steps:
      - add_ssh_keys: # Add ssh key used for private pods
          fingerprints:
            - "2a:e6:ed:7c:3b:61:f5:05:9a:d1:82:5f:38:21:5d:94"
      - set_ruby_version

jobs:
  postman_test_data:
    docker:
      - image: sirech/newman-executor:13.6
    steps:
      - add_ssh_key
      - run:
          name: "Checkout Postman data creation repo"
          command: git clone git@github.com:freeletics/postman-data-generator.git
      - run:
          name: "Run collection"
          command: |
            cd postman-data-generator/appium_data
            npx newman run appium_new_user_create.postman_collection.json -d registration_data_iterations.csv -e integration.postman_environment.json --export-environment env.json
      - persist_to_workspace:
          root: postman-data-generator/appium_data
          paths:
            - env.json

  assemble_freeletics_android_release:
    executor:
      name: prepare-workflow/android-large
    steps:
      - add_ssh_key
      - run:
          no_output_timeout: 15m
          name: "Build Android app"
          command: |
            git clone git@github.com:freeletics/fl-application-android.git
            cd fl-application-android
            mkdir -p ~/.gradle
            cp .circleci/gradle.properties ~/.gradle/gradle.properties
            ./gradlew app:freeletics:assembleIntegrationApiRelease
      - persist_to_workspace:
          root: fl-application-android
          paths:
            - app/freeletics/build/outputs/apk
      - store_artifacts:
          path: app/freeletics/build/outputs/apk/integrationApi/release/freeletics-integrationApi-release.apk
          destination: apks/freeletics-integrationApi-release.apk

  assemble_freeletics_ios_alpha:
    executor: macos
    steps:
      - initialize_git_configuration
      - add_ssh_key_for_fetching_private_swift_packages
      - run:
          no_output_timeout: 15m
          name: Assemble alpha
          command: |
            git clone git@github.com:freeletics/fl-application-ios.git
            cd fl-application-ios
            bundle install
            bundle exec fastlane create_build_for_appium
      - persist_to_workspace:
          root: fl-application-ios/
          paths:
            - Freeletics.ipa
      - store_artifacts:
          path: fl-application-ios/Freeletics.ipa

  run_appium_tests_android:
    working_directory: /home/circleci/repo
    docker:
      - image: thenishant/appium
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: "Adding Github ssh key."
          command: echo 'github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==' >> ~/.ssh/known_hosts
      - run:
          name: "Checkout Appium test repo"
          command: |
            apt-get -y update && apt-get -y install git
            git clone git@github.com:freeletics/Appium_e2e_tests.git
            cd Appium_e2e_tests
            git checkout master
      - run:
          no_output_timeout: 30m
          name: "Parse environment file containing the test data &update app to kobiton  and run tests"
          command: |
            apt-get -y update && apt-get -y install jq
            $( jq -r '.values[1].value as $k | "export EMAILS=\($k)"' env.json)
            echo "$EMAILS"

            echo "Delete the old app version. otherwise kobiton doesnt work"

            export DELETEID=$(curl -X GET https://api.kobiton.com/v1/apps -H "Authorization: Basic ${KOBITON_AUTH}"  -H 'Accept: application/json' | jq -c '.apps[] | select (.os =="ANDROID") | .versions[].id')
            echo $DELETEID
            curl -X DELETE https://api.kobiton.com/v1/app/versions/$DELETEID -H "Authorization: Basic ${KOBITON_AUTH}"

            echo "Getting the presigned url"

            export RESP=$(curl -XPOST -H "Authorization: Basic ${KOBITON_AUTH}" -H "Content-type: application/json" -d "{
                        \"filename\" : \"upload_new.apk\"}" https://api.kobiton.com/v1/apps/uploadUrl)

            echo $RESP
            $(echo $RESP | jq -r 'keys[] as $k | "export \($k)=\(.[$k])"')

            echo $url
            echo $appPath

            echo "Uploading to s3 bucket"

            curl -T app/freeletics/build/outputs/apk/integrationApi/release/freeletics-integrationApi-release.apk\
              -H "Content-Type: application/octet-stream" \
              -H "x-amz-tagging: unsaved=true" \
              -X PUT $url

            echo "Creating an upload on kobiton"

            export ID=$(curl -X POST https://api.kobiton.com/v1/apps \
              -H "Authorization: Basic ${KOBITON_AUTH}" \
              -H 'Content-Type: application/json' \
              -d "{\"filename\" :  \"upload_new.apk \", \"appPath\" :\"$appPath\"}" |
              jq -r .appId
              )
            echo "App ID is: $ID"

            apt-get -y update && apt-get -y install git
            cd Appium_e2e_tests
            git checkout master
            ./mvnw clean test -Dapp.os=ANDROID -Demails=${EMAILS} -Dis.kobiton=true -Dapp.and=$ID

  run_appium_tests_ios:
    working_directory: /home/circleci/repo
    docker:
      - image: thenishant/appium
    steps:
      - checkout
      - attach_workspace:
          at: .
      - add_ssh_keys
      - run:
          name: "Adding Github ssh key."
          command: |
            echo 'github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==' >> ~/.ssh/known_hosts
      - run:
          no_output_timeout: 15m
          name: "Checkout Appium test repo"
          command: |
            apt-get -y update && apt-get -y install git
            git clone git@github.com:freeletics/Appium_e2e_tests.git
            cd Appium_e2e_tests
            git checkout master
      - run:
          no_output_timeout: 30m
          name: "Parse environment file containing the test data from postman and run tests"
          command: |
            apt-get -y update && apt-get -y install jq

            apt-get -y update && apt-get -y install jq
            $( jq -r '.values[1].value as $k | "export EMAILS=\($k)"' env.json)
            echo "$EMAILS"

            echo "Getting the presigned url"
            export RESP=$(curl -XPOST -H "Authorization: Basic ${KOBITON_AUTH}" -H "Content-type: application/json" -d "{
                                   \"filename\" : \"upload_new.ipa\"}" https://api.kobiton.com/v1/apps/uploadUrl)

            echo $$RESP
            $(echo $RESP | jq -r 'keys[] as $k | "export \($k)=\(.[$k])"')

            export DELETEID=$(curl -X GET https://api.kobiton.com/v1/apps -H "Authorization: Basic ${KOBITON_AUTH}"  -H 'Accept: application/json' | jq -c '.apps[] | select (.os =="IOS") | .versions[].id')
            echo $DELETEID
            curl -X DELETE https://api.kobiton.com/v1/app/versions/$DELETEID -H "Authorization: Basic ${KOBITON_AUTH}"

            echo $url
            echo $appPath

            echo "Uploading to s3 bucket"

            curl -T Freeletics.ipa\
               -H "Content-Type: application/octet-stream" \
               -H "x-amz-tagging: unsaved=true" \
               -X PUT $url

            echo "Creating an upload on kobiton"

            curl -X POST https://api.kobiton.com/v1/apps \
              -H "Authorization: Basic ${KOBITON_AUTH}" \
              -H 'Content-Type: application/json' \
              -d "{\"filename\" :  \"upload_new.ipa \", \"appPath\" :\"$appPath\"}" |
              jq -r .appId

            export ID=$(curl -X GET https://api.kobiton.com/v1/apps -H "Authorization: Basic ${KOBITON_AUTH}"  -H 'Accept: application/json' | jq -c '.apps[] | select (.os =="IOS") | .id')

            apt-get -y update && apt-get -y install jq
            $( jq -r '.values[1].value as $k | "export EMAILS=\($k)"' env.json)
            echo "$EMAILS"

            cd Appium_e2e_tests
            git checkout master
            ./mvnw clean test -Dapp.os=IOS -Demails=${EMAILS} -Dis.kobiton=true -Dapp.ios=${ID}

  postman_delete_data:
    docker:
      - image: sirech/newman-executor:13.6
    resource_class: small
    working_directory: /home/circleci/repo
    steps:
      - attach_workspace:
          at: .
      - add_ssh_key
      - run:
          name: "Adding Github ssh key."
          command: |
            # Copied from checkout step
            echo 'github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==' >> ~/.ssh/known_hosts
      - run:
          name: "Checkout Postman data creation repo"
          command: git clone git@github.com:freeletics/postman-data-generator.git
      - run:
          name: "Get user data to be deleted"
          command: |
            jq '.values | [ (.[1].value / ","), (.[2].value / ",") ] | transpose | map({email_registered: .[0], id: .[1]})' env.json > data.json
      - run:
          name: "Run collection"
          command: |
            cd postman-data-generator/appium_data
            npx newman run cleanup_users.json  -d ../../data.json -e integration.postman_environment.json --export-environment env.json

 
workflows:
  version: 2

  run_appium_tests_android:
    triggers:
      - schedule:
          cron: "0 5 * * 1-5" # 05:00 UTC = 07:00 CEST
          filters:
            branches:
              only:
                - master
    jobs:
      - postman_test_data
      - assemble_freeletics_android_release
      - run_appium_tests_android:
          requires:
            - postman_test_data
            - assemble_freeletics_android_release
      - postman_delete_data:
          requires:
            - run_appium_tests_android

  run_appium_tests_ios:
    triggers:
      - schedule:
          cron: "0 4 * * 1-5" # 05:00 UTC = 07:00 CEST
          filters:
            branches:
              only:
                - master
    jobs:
      - postman_test_data
      - assemble_freeletics_ios_alpha:
          context:
            - "fl-shared-jenkins Github"
            - "iOS"
            - "Commit Signing"
            - "app_store_connect_api"
      - run_appium_tests_ios:
          requires:
            - postman_test_data
            - assemble_freeletics_ios_alpha
      - postman_delete_data:
          requires:
            - run_appium_tests_ios
